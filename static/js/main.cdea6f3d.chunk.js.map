{"version":3,"sources":["api.ts","types/Status.ts","components/Loader/Loader.tsx","components/TodoItemData/TodoItemData.tsx","components/TodoList/TodoList.tsx","services/getTodosByQuery.tsx","services/getTodosByStatus.tsx","services/getStatus.tsx","components/TodoFilter/TodoFilter.tsx","components/ErrorMasage/ErorMasage.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","Loader","className","TodoItemData","todo","id","title","completed","classNames","TodoList","todos","query","selctedTodo","selectedOption","onTodoSelected","filteredTodo","useMemo","filter","toLocaleLowerCase","includes","toLowerCase","getTodosByQuery","todoStatus","getTodosByStatus","map","type","onClick","TodoFilter","onQueryChange","onSelect","useState","inputValue","setInputValue","useEffect","onSubmit","e","preventDefault","onChange","value","target","active","all","getStatus","placeholder","style","pointerEvents","ErrorMessage","message","onReload","setErrorMessage","Date","TodoModal","selectedTodo","onModalClose","user","setUser","updateAt","setUpdateAt","userErrorMessage","setUserErrorMessage","userId","setUserId","getUser","catch","finally","href","email","name","App","setQuery","setTodos","status","setStatus","isLoading","setIsLoading","setSelectedTodo","ReactDOM","render","document","getElementById"],"mappings":"0NAYA,SAASA,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,ICrBKC,E,OCGCC,EAAmB,kBAC9B,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uB,gBCENC,EAAgC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtCC,EAAyBD,EAAzBC,GAAIC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAEnB,OACE,qCACE,oBAAIL,UAAU,eAAd,SAA8BG,IAE9B,oBAAIH,UAAU,eAAd,SACGK,GACC,sBAAML,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWM,IAAW,GACvB,CAAE,mBAAoBD,GACtB,CAAE,mBAAoBA,IAFxB,SAIGD,UCTEG,EAA4B,SAAC,GAMnC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEMC,EAAeC,mBAAQ,WAC3B,OCxB2B,SAACN,EAAeC,GAC7C,OAAOA,EACHD,EAAMO,QAAO,SAAAb,GAAI,OAAIA,EAAKE,MAAMY,oBAC/BC,SAASR,EAAMS,kBAChBV,EDoBKW,CEvBqB,SAACX,EAAeY,GAC9C,OAAQA,GACN,IAAK,SACH,OAAOZ,EAAMO,QAAO,SAAAb,GAAI,OAAKA,EAAKG,aAEpC,IAAK,YACH,OAAOG,EAAMO,QAAO,SAAAb,GAAI,OAAIA,EAAKG,aAGnC,QACE,OAAOG,GFaca,CAAiBb,EAAOG,GAAiBF,KAC/D,CAACD,EAAOG,EAAgBF,IAE3B,OACE,wBAAOT,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGa,EAAaS,KAAI,SAACpB,GAAD,OAChB,qBAEE,UAAQ,OACRF,UAAWM,IAAW,GACpB,CAAE,4BAA6BI,IAAgBR,IAJnD,UAME,cAAC,EAAD,CAAcA,KAAMA,IAEpB,oBAAIF,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVuB,KAAK,SACLC,QAAS,kBAAMZ,EAAeV,IAJhC,SAME,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAWM,IAAW,GACvB,CAAE,aAAcI,IAAgBR,GAChC,CAAE,mBAAoBQ,IAAgBR,cAjBzCA,EAAKC,c,SH/CVL,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KMEL,ICQM2B,EAA8B,SAAC,GAGrC,IAFLC,EAEI,EAFJA,cACAC,EACI,EADJA,SAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMA,OAJAC,qBAAU,WACRL,EAAcG,KACb,CAACA,EAAYH,IAGd,uBACE1B,UAAU,mBACVgC,SAAU,SAAAC,GAAC,OAAIA,EAAEC,kBAFnB,UAIE,mBAAGlC,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRmC,SAAU,SAACF,GAAD,OAAON,ED3BJ,SAACM,GACxB,IAAQG,EAAUH,EAAEI,OAAZD,MAER,MAAc,QAAVA,EACe,WAAVA,EAAqBtC,EAAOwC,OAASxC,EAAOO,UAG9CP,EAAOyC,ICoBsBC,CAAUP,KAFtC,UAIE,wBAAQG,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGpC,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRuB,KAAK,OACLvB,UAAU,QACVyC,YAAY,YACZL,MAAOP,EACPM,SAAU,SAAAF,GAAC,OAAIH,EAAcG,EAAEI,OAAOD,UAExC,sBAAMpC,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGC,KAAf6B,GACC,sBAAM7B,UAAU,gBAAgB0C,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRpB,KAAK,SACLvB,UAAU,SACVwB,QAAS,kBAAMM,EAAc,gBClD9Bc,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACAC,EACI,EADJA,gBAEA,OACE,gCACE,4BAAIF,IACJ,sBAAM7C,UAAU,GAAG0C,MAAO,CAAEC,cAAe,OAA3C,SAEE,wBACEpB,KAAK,SACLC,QAAS,WACPsB,EAAS,IAAIE,MACbD,EAAgB,KAJpB,sBAUF,cAAC,EAAD,QCdOE,EAA6B,SAAC,GAGpC,IAFLC,EAEI,EAFJA,aAEI,IADJC,oBACI,MADW,aACX,EACJ,EAAwBvB,qBAAxB,mBAAOwB,EAAP,KAAaC,EAAb,KACA,EAAgCzB,mBAAS,IAAIoB,MAA7C,mBAAOM,EAAP,KAAiBC,EAAjB,KACA,EAAgD3B,mBAAS,IAAzD,mBAAO4B,EAAP,KAAyBC,EAAzB,KACA,EAA4B7B,mBAC1BsB,EAAeA,EAAaQ,OAAS,MADvC,mBAAOA,EAAP,KAAeC,EAAf,KAaA,OATA5B,qBAAU,WACJ2B,GVHe,SAACA,GAAD,OAAoBvE,EAAG,iBAAiBuE,IUIzDE,CAAQF,GACLhE,KAAK2D,GACLQ,OAAM,kBAAMJ,EAAoB,qBAChCK,SAAQ,kBAAMH,EAAU,WAE5B,CAACD,EAAQJ,IAGV,sBAAKtD,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd0D,EACC,cAAC,EAAD,IAEA,sBAAK1D,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYkD,QAJZ,IAIYA,OAJZ,EAIYA,EAAc/C,MAI1B,wBACEoB,KAAK,SACLvB,UAAU,SACV,UAAQ,cACRwB,QAAS,kBAAM2B,EAAa,YAIhC,sBAAKnD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGkD,QADH,IACGA,OADH,EACGA,EAAc9C,QAGhBoD,IAAqBJ,EACpB,cAAC,EAAD,CACEP,QAASW,EACTT,gBAAiBU,EACjBX,SAAUS,IAGZ,oBAAGvD,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBACEA,UAAWM,IAAW,GACpB,CAAE,oBAAmB,OAAC4C,QAAD,IAACA,KAAc7C,YACpC,CAAE,0BAAoB6C,QAApB,IAAoBA,OAApB,EAAoBA,EAAc7C,YAHxC,SAKe,OAAZ6C,QAAY,IAAZA,KAAc7C,UAAY,OAAS,YAGrC,OAED,mBAAG0D,KAAI,wBAAYX,QAAZ,IAAYA,OAAZ,EAAYA,EAAMY,OAAzB,gBACGZ,QADH,IACGA,OADH,EACGA,EAAMa,oBCtEZC,EAAgB,WAC3B,MAA0BtC,mBAAS,IAAnC,mBAAOnB,EAAP,KAAc0D,EAAd,KACA,EAA0BvC,mBAAiB,IAA3C,mBAAOpB,EAAP,KAAc4D,EAAd,KACA,EAA4BxC,mBAAS9B,EAAOyC,KAA5C,mBAAO8B,EAAP,KAAeC,EAAf,KACA,EAAkC1C,oBAAS,GAA3C,mBAAO2C,EAAP,KAAkBC,EAAlB,KACA,EAAwC5C,mBAAsB,MAA9D,mBAAOsB,EAAP,KAAqBuB,EAArB,KAUA,OARA1C,qBAAU,WACRyC,GAAa,GXDarF,EAAY,UWInCO,KAAK0E,GACLN,SAAQ,kBAAMU,GAAa,QAC7B,IAGD,qCACE,qBAAKxE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBACA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE0B,cAAeyC,EACfxC,SAAU2C,MAId,qBAAKtE,UAAU,QAAf,SACGuE,EAEG,cAAC,EAAD,IAEA,cAAC,EAAD,CACE/D,MAAOA,EACPC,MAAOA,EACPC,YAAawC,EACbvC,eAAgB0D,EAChBzD,eAAgB6D,aAQ7BvB,GACC,cAAC,EAAD,CACEA,aAAcA,EACdC,aAAcsB,QC3DxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cdea6f3d.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoItemData: React.FC<Props> = ({ todo }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <>\n      <td className=\"is-vcentered\">{id}</td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames('',\n          { 'has-text-danger': !completed },\n          { 'has-text-success': completed })}\n        >\n          {title}\n        </p>\n      </td>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\n\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport { getTodosByStatus } from '../../services/getTodosByStatus';\nimport { getTodosByQuery } from '../../services/getTodosByQuery';\nimport { TodoItemData } from '../TodoItemData/TodoItemData';\n\ntype Props = {\n  todos: Todo[]\n  query: string\n  selectedOption: Status\n  selctedTodo: Todo | null\n  onTodoSelected: (val: Todo) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  query,\n  selctedTodo,\n  selectedOption,\n  onTodoSelected,\n}) => {\n  const filteredTodo = useMemo(() => {\n    return getTodosByQuery(getTodosByStatus(todos, selectedOption), query);\n  }, [todos, selectedOption, query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodo.map((todo) => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames('',\n              { 'has-background-info-light': selctedTodo === todo })}\n          >\n            <TodoItemData todo={todo} />\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelected(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('',\n                    { 'far fa-eye': selctedTodo !== todo },\n                    { 'far fa-eye-slash': selctedTodo === todo })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n\n    </table>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const getTodosByQuery = (todos: Todo[], query: string) => {\n  return query\n    ? todos.filter(todo => todo.title.toLocaleLowerCase()\n      .includes(query.toLowerCase()))\n    : todos;\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getTodosByStatus = (todos: Todo[], todoStatus: Status) => {\n  switch (todoStatus) {\n    case 'active':\n      return todos.filter(todo => !todo.completed);\n\n    case 'completed':\n      return todos.filter(todo => todo.completed);\n\n    case 'all':\n    default:\n      return todos;\n  }\n};\n","import { Status } from '../types/Status';\n\nexport const getStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  const { value } = e.target;\n\n  if (value !== 'all') {\n    return value === 'active' ? Status.active : Status.completed;\n  }\n\n  return Status.all;\n};\n","import { useEffect, useState } from 'react';\nimport { getStatus } from '../../services/getStatus';\nimport { Status } from '../../types/Status';\nimport 'bulma/css/bulma.css';\n\ntype Props = {\n  onQueryChange: (val: string) => void\n  onSelect: (val: Status) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onQueryChange,\n  onSelect,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    onQueryChange(inputValue);\n  }, [inputValue, onQueryChange]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={e => e.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => onSelect(getStatus(e))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={e => setInputValue(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputValue !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setInputValue('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Loader } from '../Loader';\n\ntype Props = {\n  message: string\n  onReload: (val: Date) => void\n  setErrorMessage: (val: string) => void\n};\n\nexport const ErrorMessage: React.FC<Props> = ({\n  message,\n  onReload,\n  setErrorMessage,\n}) => {\n  return (\n    <div>\n      <p>{message}</p>\n      <span className=\"\" style={{ pointerEvents: 'all' }}>\n        {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n        <button\n          type=\"button\"\n          onClick={() => {\n            onReload(new Date());\n            setErrorMessage('');\n          }}\n        >\n          Reload\n        </button>\n      </span>\n      <Loader />\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport 'bulma/css/bulma.css';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { ErrorMessage } from '../ErrorMasage/ErorMasage';\n\ntype Props = {\n  selectedTodo: Todo | null\n  onModalClose: (val: Todo | null) => void\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onModalClose = () => { },\n}) => {\n  const [user, setUser] = useState<User>();\n  const [updateAt, setUpdateAt] = useState(new Date());\n  const [userErrorMessage, setUserErrorMessage] = useState('');\n  const [userId, setUserId] = useState<number | null>(\n    selectedTodo ? selectedTodo.userId : null,\n  );\n\n  useEffect(() => {\n    if (userId) {\n      getUser(userId)\n        .then(setUser)\n        .catch(() => setUserErrorMessage('User not found'))\n        .finally(() => setUserId(null));\n    }\n  }, [userId, updateAt]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {userId ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onModalClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            {userErrorMessage || !user ? (\n              <ErrorMessage\n                message={userErrorMessage}\n                setErrorMessage={setUserErrorMessage}\n                onReload={setUpdateAt}\n              />\n            ) : (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong\n                  className={classNames('',\n                    { 'has-text-danger': !selectedTodo?.completed },\n                    { 'has-text-success': selectedTodo?.completed })}\n                >\n                  {selectedTodo?.completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            )}\n\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [status, setStatus] = useState(Status.all);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                onQueryChange={setQuery}\n                onSelect={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={todos}\n                    query={query}\n                    selctedTodo={selectedTodo}\n                    selectedOption={status}\n                    onTodoSelected={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onModalClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\n// import React from 'react';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}